@inherits Bunit.TestContext

@code {

    [TestCase("btn")]
    [TestCase("big")]
    [TestCase("cta")]
    public void Succeed(string expectedClass)
    {
        Render(@<button Class="btn big cta"><h1>Test</h1></button>)
            .Should().HaveClass(expectedClass);
    }

    [Test]
    public void ReturnAndConstraint()
    {
        var andConstraint = Render(@<button Class="btn big cta"><h1>Test</h1></button>)
            .Should().HaveClass("btn");

        andConstraint.Should().BeOfType<AndConstraint<RenderedFragmentAssertions>>();
    }

    [Test]
    public void ThrowException_WhenDoesNotHaveAnyClass()
    {
        Action aut = () => Render(@<button><h1>Test</h1></button>)
            .Should().HaveClass("btn");

        aut.Should().Throw<AssertionException>()
            .And.Message.Should().Be("""Expected IRenderedFragment to have class "btn", but found no classes.""");
    }

    [Test]
    public void ThrowException_WhenDoesNotHaveAnyClass_AndShouldIncludeBecauseMessage()
    {
        Action aut = () => Render(@<button><h1>Test</h1></button>)
            .Should().HaveClass("btn", "this is very important to {0}", "Ben");

        aut.Should().Throw<AssertionException>()
            .And.Message.Should().Be("""Expected IRenderedFragment to have class "btn" because this is very important to Ben, but found no classes.""");
    }

    [Test]
    public void ThrowException_WhenHasAttributeWithWrongValue()
    {
        Action aut = () => Render(@<button Class="btt big cta"><h1>Test</h1></button>)
            .Should().HaveClass("btn");

        aut.Should().Throw<AssertionException>()
            .And.Message.Should().Be("""Expected IRenderedFragment to have class "btn", but found classes ["btt, big, cta"].""");
    }

    [Test]
    public void ThrowException_WhenHasAttributeWithWrongValue_AndShouldIncludeBecauseMessage()
    {
        Action aut = () => Render(@<button Class="btt big cta"><h1>Test</h1></button>)
            .Should().HaveClass("btn", "this is very important to {0}", "Ben");

        aut.Should().Throw<AssertionException>()
            .And.Message.Should().Be("""Expected IRenderedFragment to have class "btn" because this is very important to Ben, but found classes ["btt, big, cta"].""");
    }
}