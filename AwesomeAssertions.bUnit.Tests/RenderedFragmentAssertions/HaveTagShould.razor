
@inherits Bunit.TestContext

@code {
    
    [Test]
    public void Succeed()
    {
        Render(@<button><h1>Test</h1></button>)
            .Should().HaveTag("button");
    }
    
    [Test]
    public void ReturnAndConstraint()
    {
        var andConstraint = Render(@<button><h1>Test</h1></button>)
            .Should().HaveTag("button");

        andConstraint.Should().BeOfType<AndConstraint<RenderedFragmentAssertions>>();
    }

    [Test]
    public void ThrowException_WhenNotMatchExpected()
    {
        Action aut = () => Render(@<div><h1>Test</h1></div>)
            .Should().HaveTag("button");

        aut.Should().Throw<AssertionException>()
            .And.Message.Should().Be("Expected IRenderedFragment \"tag\" to be \"button\", but found \"div\".");
    }
    
    [Test]
    public void ThrowException_WhenTagNotMatchExpected_AndShouldIncludeBecauseMessage()
    {
        Action aut = () => Render(@<div><h1>Test</h1></div>)
            .Should().HaveTag("button", "this is very important to {0}", "Steve");

        aut.Should().Throw<AssertionException>()
            .And.Message.Should().Be("Expected IRenderedFragment \"tag\" to be \"button\" because this is very important to Steve, but found \"div\".");
    }
}