
@inherits Bunit.TestContext

@code {
    
    [Test]
    public void Succeed_WhenMatchingByString()
    {
        Render(@<button><h1>Test</h1></button>)
            .Should().HaveMarkup("<button><h1>Test</h1></button>");
    }
    
    [Test]
    public void Succeed_WhenMatchingByRenderFragment()
    {
        Render(@<button><h1>Test</h1></button>)
            .Should().HaveMarkup(@<button><h1>Test</h1></button>);
    }
    
    [Test]
    public void ReturnAndConstraint_WhenMatchingByString()
    {
        var andConstraint = Render(@<button><h1>Test</h1></button>)
            .Should().HaveMarkup("<button><h1>Test</h1></button>");

        andConstraint.Should().BeOfType<AndConstraint<RenderedFragmentAssertions>>();
    }
    
    [Test]
    public void ReturnAndConstraint_WhenMatchingByRenderFragment()
    {
        var andConstraint = Render(@<button><h1>Test</h1></button>)
            .Should().HaveMarkup(@<button><h1>Test</h1></button>);

        andConstraint.Should().BeOfType<AndConstraint<RenderedFragmentAssertions>>();
    }

    [Test]
    public void ThrowException_WhenChildMarkupDoesNotMatch_AndMatchingByString()
    {
        Action aut = () => Render(@<button><h2>Test</h2></button>)
            .Should().HaveMarkup("<button><h1>Test</h1></button>");

        aut.Should().Throw<AssertionException>()
            .And.Message.Should().BeEquivalentTo("Expected IRenderedFragment markup \"<button><h1>Test</h1></button>\", but found \"<button><h2>Test</h2></button>\".");
    }

    [Test]
    public void ThrowException_WhenChildMarkupDoesNotMatch_AndMatchingByRenderFragment()
    {
        Action aut = () => Render(@<button><h2>Test</h2></button>)
            .Should().HaveMarkup(@<button><h1>Test</h1></button>);

        aut.Should().Throw<AssertionException>()
            .And.Message.Should().BeEquivalentTo("Expected IRenderedFragment markup \"<button><h1>Test</h1></button>\", but found \"<button><h2>Test</h2></button>\".");
    }
    
    [Test]
    public void ThrowException_AndIncludeBecauseMessage_WhenChildMarkupDoesNotMatch_AndMatchingByString()
    {
        Action aut = () => Render(@<button><h2>Test</h2></button>)
            .Should().HaveMarkup("<button><h1>Test</h1></button>", "this is very important to {0}", "Steve");;

        aut.Should().Throw<AssertionException>()
            .And.Message.Should().BeEquivalentTo("Expected IRenderedFragment markup \"<button><h1>Test</h1></button>\" because this is very important to Steve, but found \"<button><h2>Test</h2></button>\".");
    }
    
    [Test]
    public void ThrowException_AndIncludeBecauseMessage_WhenChildMarkupDoesNotMatch_AndMatchingByRenderFragment()
    {
        Action aut = () => Render(@<button><h2>Test</h2></button>)
            .Should().HaveMarkup(@<button><h1>Test</h1></button>, "this is very important to {0}", "Steve");

        aut.Should().Throw<AssertionException>()
            .And.Message.Should().BeEquivalentTo("Expected IRenderedFragment markup \"<button><h1>Test</h1></button>\" because this is very important to Steve, but found \"<button><h2>Test</h2></button>\".");
    }
}