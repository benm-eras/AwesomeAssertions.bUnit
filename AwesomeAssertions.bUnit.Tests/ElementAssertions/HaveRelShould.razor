@inherits Bunit.TestContext

@code {

    [TestCase("nofollow")]
    [TestCase("noopener")]
    public void Succeed(string expected)
    {
        Render(@<a href="#" rel="nofollow noopener">Link</a>)
            .AsElement()
            .Should().HaveRel(expected);
    }

    [TestCase("nofollow")]
    [TestCase("noopener")]
    public void ReturnAndConstraint(string expected)
    {
        var andConstraint = Render(@<a href="#" rel="nofollow noopener">Link</a>)
            .AsElement()
            .Should().HaveRel(expected);

        andConstraint.Should().BeOfType<AndConstraint<ElementAssertions>>();
    }

    [Test]
    public void ThrowException_WhenDoesNotHaveAttribute()
    {
        Action aut = () => Render(@<a href="#">Link</a>)
            .AsElement()
            .Should().HaveRel("nofollow");

        aut.Should().Throw<AssertionException>()
            .And.Message.Should().Be("Expected IElement to have attribute \"rel\", but found <null>.");
    }

    [Test]
    public void ThrowException_WhenDoesNotHaveAttribute_AndShouldIncludeBecauseMessage()
    {
        Action aut = () => Render(@<a href="#">Link</a>)
            .AsElement()
            .Should().HaveRel("nofollow", "this is very important to {0}", "Steve");

        aut.Should().Throw<AssertionException>()
            .And.Message.Should().Be("Expected IElement to have attribute \"rel\" because this is very important to Steve, but found <null>.");
    }

    [Test]
    public void ThrowException_WhenHasAttributeWithWrongValue()
    {
        Action aut = () => Render(@<a href="#" rel="nofollow">Link</a>)
            .AsElement()
            .Should().HaveRel("noopener");

        aut.Should().Throw<AssertionException>()
            .And.Message.Should().Be("Expected IElement \"rel\" [{\"nofollow\"}] to contain \"noopener\".");
    }

    [Test]
    public void ThrowException_WhenHasAttributeWithWrongValue_AndShouldIncludeBecauseMessage()
    {
        Action aut = () => Render(@<a href="#" rel="nofollow">Link</a>)
            .AsElement()
            .Should().HaveRel("noopener", "this is very important to {0}", "Steve");

        aut.Should().Throw<AssertionException>()
            .And.Message.Should().Be("Expected IElement \"rel\" [{\"nofollow\"}] to contain \"noopener\" because this is very important to Steve.");
    }
}