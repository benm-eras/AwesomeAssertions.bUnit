
@inherits Bunit.TestContext

@code {
    
    [Test]
    public void Succeed()
    {
        Render(@<a href="#" target="_blank">Link</a>)
            .AsElement()
            .Should().HaveTarget("_blank");
    }
    
    [Test]
    public void ReturnAndConstraint()
    {
        var andConstraint = Render(@<a href="#" target="_blank">Link</a>)
            .AsElement()
            .Should().HaveTarget("_blank");

        andConstraint.Should().BeOfType<AndConstraint<ElementAssertions>>();
    }
    
    [Test]
    public void ThrowException_WhenDoesNotHaveAttribute()
    {
        Action aut = () => Render(@<a href="#" >Link</a>)
            .AsElement()
            .Should().HaveTarget("_blank");

        aut.Should().Throw<AssertionException>()
            .And.Message.Should().Be("Expected IElement to have attribute \"target\", but found <null>.");
    }
    
    [Test]
    public void ThrowException_WhenDoesNotHaveAttribute_AndShouldIncludeBecauseMessage()
    {
        Action aut = () => Render(@<a href="#">Link</a>)
            .AsElement()
            .Should().HaveTarget("_blank", "this is very important to {0}", "Steve");

        aut.Should().Throw<AssertionException>()
            .And.Message.Should().Be("Expected IElement to have attribute \"target\" because this is very important to Steve, but found <null>.");
    }
    
    [Test]
    public void ThrowException_WhenHasAttributeWithWrongValue()
    {
        Action aut = () => Render(@<a href="#" target="_self">Link</a>)
            .AsElement()
            .Should().HaveTarget("_blank");

        aut.Should().Throw<AssertionException>()
            .And.Message.Should().Be("Expected IElement \"target\" attribute to have value \"_blank\", but found \"_self\".");
    }
    
    [Test]
    public void ThrowException_WhenHasAttributeWithWrongValue_AndShouldIncludeBecauseMessage()
    {
        Action aut = () => Render(@<a href="#" target="_self">Link</a>)
            .AsElement()
            .Should().HaveTarget("_blank", "this is very important to {0}", "Steve");

        aut.Should().Throw<AssertionException>()
            .And.Message.Should().Be("Expected IElement \"target\" attribute to have value \"_blank\" because this is very important to Steve, but found \"_self\".");
    }
}